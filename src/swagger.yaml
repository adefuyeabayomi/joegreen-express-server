openapi: 3.0.0
info:
  title: Five and six technologies Apis Docs
  version: 1.0.0
  description: API documentation for FST Apis

tags:
  - name: Ping
    description: Endpoints for health check and logs management
  - name: Auth
    description: Endpoints for Authentications
  - name: Profile
    description: Endpoints for User Profile Management
  - name: Menu
    description: Endpoints for managing site Dishes & Menu
  - name: Blog
    description: Endpoint for managing site blogs
  - name: customer-service
    description: Operations related to customer messages
  - name: Order
    description: Endpoints to manage orders

components:
  schemas:
    CartItem:
      type: object
      properties:
        id:
          type: string
          example: "607d2f3c9d2e2f001f647bb7"
        name:
          type: string
          example: "Chicken Biryani"
        addons:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "Extra Chicken"
              price:
                type: number
                example: 500
              quantity:
                type: integer
                example: 2
        description:
          type: string
          example: "Spicy chicken biryani with extra spices"
        price:
          type: number
          example: 2400
        published:
          type: boolean
          example: true
        category:
          type: string
          example: "Main Course"
        image:
          type: string
          example: "https://example.com/images/chicken-biryani.jpg"
        message:
          type: string
          example: "Enjoy your meal!"
        quantity:
          type: integer
          example: 2
    
    Order:
      type: object
      properties:
        orderId:
          type: string
          example: "607d2f3c9d2e2f001f647bb6"
        cartItems:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        phoneNumber:
          type: string
          example: "+1234567890"
        deliveryInfo:
          type: string
          example: "123 Main Street, Apt 4B, New York, NY 10001"
        narration:
          type: string
          example: "2 plates of Chicken Biryani, 1 plate of Veg Curry"
        transactionRef:
          type: string
          example: "ab12cd34efgh567ijklmnop"
        paymentStatus:
          type: string
          enum:
            - pending
            - completed
            - failed
          example: "pending"
        cancelled:
          type: boolean
          example: false
        user:
          type: string
          example: "607d2f3c9d2e2f001f647bb5"
    
    Auth:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        recoveryEmail:
          type: string
          format: email
          description: User's recovery email address
        hash:
          type: string
          description: Password hash
        disabled:
          type: boolean
          description: Is the account disabled
        deleted:
          type: boolean
          description: Is the account deleted
        created:
          type: string
          format: date-time
          description: Account creation date
        otp:
          type: string
          description: One-time password
        verified:
          type: boolean
          description: Is the account verified
        verifyTokenString:
          type: string
          description: Token string for account verification
        resetTokenString:
          type: string
          description: Token string for password reset
    
    Profile:
      type: object
      properties:
        id:
          type: string
          example: "507f191e810c19729de860ea"
        username:
          type: string
          example: "user90249"
        profileImage:
          type: string
          example: "https://example.com/image.jpg"
        email:
          type: string
          example: "user@example.com"
        createdAt:
          type: string
          format: date-time
          example: "2023-07-18T12:34:56Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-18T12:34:56Z"
        
    Dish:
      type: object
      properties:
        name:
          type: string
        image:
          type: string
        addons:
          type: array
          items:
            type: string
        description:
          type: string
        published:
          type: boolean
        created:
          type: string
          format: date-time
    
    DishCategory:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        published:
          type: boolean
        created:
          type: string
          format: date-time
    
    Blog:
      type: object
      properties:
        title:
          type: string
        highlightParagraph:
          type: string
        created:
          type: string
          format: date-time
        link:
          type: string
        image:
          type: string
        published:
          type: boolean
      required:
        - title
        - highlightParagraph
        - link
    
    CustomerMessage:
      type: object
      properties:
        email:
          type: string
        message:
          type: string
        created:
          type: string
          format: date-time
        replied:
          type: boolean
      required:
        - email
        - message

paths:
  /profile:
    post:
      tags:
        - Profile
      summary: Create a new profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        201:
          description: Profile created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
        500:
          description: Error creating profile

    get:
      tags:
        - Profile
      summary: Get profiles with pagination
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Page number for pagination
      responses:
        200:
          description: Profiles fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profiles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
        500:
          description: Error fetching profiles

  /profile/search:
    get:
      tags:
        - Profile
      summary: Search profiles based on queries
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: username
          required: false
          schema:
            type: string
          description: Username to search for
        - in: query
          name: email
          required: false
          schema:
            type: string
          description: Email to search for
        # Add other query parameters as needed
      responses:
        200:
          description: Profiles fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        500:
          description: Error searching profiles

  /profile/{userId}:
    get:
      tags:
        - Profile
      summary: Get profile by user ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to fetch
      responses:
        200:
          description: Profile fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: Profile not found
        500:
          description: Error fetching profile

    put:
      tags:
        - Profile
      summary: Update profile
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                profileImage:
                  type: string
                # Add other fields as needed
      responses:
        200:
          description: Profile updated successfully
        400:
          description: Bad request
        404:
          description: Profile not found
        500:
          description: Error updating profile

    delete:
      tags:
        - Profile
      summary: Delete profile
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to delete
      responses:
        200:
          description: Profile deleted successfully
        404:
          description: Profile not found
        500:
          description: Error deleting profile

  /profile/{userId}/upload:
    post:
      tags:
        - Profile
      summary: Upload profile image
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID of the profile to update
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Profile image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  urls:
                    type: array
                    items:
                      type: string
        400:
          description: Bad request
        500:
          description: Error uploading profile image

  /auth/signup/emailandpassword:
    post:
      tags:
        - Auth
      summary: User Signup
      description: Signup a new user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Invalid input
        "409":
          description: Email already registered

  /auth/signup/admin:
    post:
      tags:
        - Auth
      summary: Admin Signup
      description: Signup a new admin user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "201":
          description: Admin created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Invalid input
        "409":
          description: Email already registered

  /auth/login:
    post:
      tags:
        - Auth
      summary: User Login
      description: Login a user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Forgot Password
      description: Request a password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        "200":
          description: Reset link sent
        "400":
          description: Invalid input
        "404":
          description: Email not found

  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Reset Password
      description: Reset the password using a reset token
      parameters:
        - name: resetToken
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
              required:
                - newPassword
      responses:
        "200":
          description: Password reset successful
        "400":
          description: Invalid input
        "401":
          description: Invalid or expired reset token

  /auth/update:
    put:
      tags:
        - Auth
      summary: Update User Details
      description: Update email, password, and recovery email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                recoveryEmail:
                  type: string
                  format: email
      responses:
        "200":
          description: User details updated
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /auth/disable:
    put:
      tags:
        - Auth
      summary: Disable Account
      description: Disable a user account
      responses:
        "200":
          description: Account disabled
        "401":
          description: Unauthorized

  /auth/delete:
    delete:
      tags:
        - Auth
      summary: Delete Account
      description: Delete a user account
      responses:
        "200":
          description: Account deleted
        "401":
          description: Unauthorized

  /auth/is-valid:
    get:
      tags:
        - Auth
      summary: Check if token is valid
      description: Checks if the provided token is valid
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token
      responses:
        200:
          description: Token verification status
          content:
            application/json:
              schema:
                type: object
                properties:
                  isVerified:
                    type: boolean
        401:
          description: Token is missing
        403:
          description: Token is not valid
        404:
          description: User not found
        500:
          description: Internal Server Error

  /resend-verification-email:
    post:
      tags:
        - Auth
      summary: Resend verification email
      description: Resends a verification email to a user if the user is found and has not been verified yet.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                  description: The email address of the user to whom the verification email will be sent.
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification email sent
                    description: Success message indicating the verification email was sent.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email format
                    description: Error message for invalid email or already verified email.
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                    description: Error message when the user is not found in the database.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error
                    description: Error message indicating a server error occurred.

  /:
    get:
      summary: Performs a ping request
      tags: [Ping]
      responses:
        200:
          description: Returns pong

  /status:
    get:
      summary: Get server status
      tags: [Ping]
      responses:
        200:
          description: Returns server status

  /request-logs:
    get:
      summary: Get request logs
      tags: [Ping]
      responses:
        200:
          description: Returns request logs
        500:
          description: Error reading request logs

  /app-logs:
    get:
      summary: Get application logs
      tags: [Ping]
      responses:
        200:
          description: Returns application logs
        500:
          description: Error reading application logs

  /clear-request-logs:
    get:
      summary: Clear request logs
      tags: [Ping]
      responses:
        200:
          description: Request logs cleared
        500:
          description: Error clearing request logs

  /clear-app-logs:
    get:
      summary: Clear application logs
      tags: [Ping]
      responses:
        200:
          description: Application logs cleared
        500:
          description: Error clearing application logs
  
  /dishes:
    get:
      summary: Get all dishes
      tags: [Menu]
      responses:
        '200':
          description: List of dishes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
    post:
      summary: Create a new dish
      tags: [Menu]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
      responses:
        '201':
          description: Dish created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        '403':
          description: Forbidden - Only admin users can create dishes

  /dishes/{id}:
    get:
      summary: Get a dish by ID
      tags: [Menu]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Dish details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        '404':
          description: Dish not found
    put:
      summary: Update a dish
      tags: [Menu]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
      responses:
        '200':
          description: Dish updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        '403':
          description: Forbidden - Only admin users can update dishes
        '404':
          description: Dish not found
    post:
      summary: Update dish image
      tags: [Menu]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Dish image updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        '403':
          description: Forbidden - Only admin users can update dish images
        '400':
          description: No files uploaded

  /categories:
    get:
      summary: Get all categories
      tags: [Menu]
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DishCategory'
    post:
      summary: Create a new category
      tags: [Menu]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishCategory'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishCategory'
        '403':
          description: Forbidden - Only admin users can create categories

  /categories/{id}:
    get:
      summary: Get a category by ID
      tags: [Menu]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishCategory'
        '404':
          description: Category not found
    put:
      summary: Update a category
      tags: [Menu]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishCategory'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishCategory'
        '403':
          description: Forbidden - Only admin users can update categories
        '404':
          description: Category not found

  /items/{type}/{id}:
    delete:
      summary: Delete a dish or category
      tags: [Menu]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum:
              - dish
              - category
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item deleted successfully
        '403':
          description: Forbidden - Only admin users can delete items
        '404':
          description: Item not found
        '400':
          description: Invalid type

  /blogs:
    get:
      summary: Get all blog posts
      tags: [Blog]
      responses:
        '200':
          description: Successfully retrieved all blog posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
    post:
      summary: Create a new blog post
      tags: [Blog]
      security:
        - bearerAuth: []
      requestBody:
        description: Blog post data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
        required: true
      responses:
        '201':
          description: Successfully created a new blog post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '403':
          description: Access denied
        '500':
          description: Server error

  /blogs/{id}:
    get:
      summary: Get a blog post by ID
      tags: [Blog]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the blog post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '404':
          description: Blog post not found
        '500':
          description: Server error
    put:
      summary: Update a blog post by ID
      tags: [Blog]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated blog post data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
        required: true
      responses:
        '200':
          description: Successfully updated the blog post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '403':
          description: Access denied
        '404':
          description: Blog post not found
        '500':
          description: Server error
    delete:
      summary: Delete a blog post by ID
      tags: [Blog]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the blog post
        '403':
          description: Access denied
        '404':
          description: Blog post not found
        '500':
          description: Server error

  /customer-messages:
    post:
      tags:
        - customer-service
      summary: Send a new customer message
      requestBody:
        description: Customer message data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerMessage'
        required: true
      responses:
        '201':
          description: Successfully created a new customer message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerMessage'
        '500':
          description: Server error

  /customer-messages/{id}/reply:
    post:
      tags:
        - customer-service
      summary: Reply to a customer message via email
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Admin reply message
        content:
          application/json:
            schema:
              type: object
              properties:
                reply:
                  type: string
              required:
                - reply
        required: true
      responses:
        '200':
          description: Successfully replied to the customer message
        '400':
          description: Invalid request
        '404':
          description: Customer message not found
        '403':
          description: Access denied
        '500':
          description: Server error
  
  /orders:
    get:
      tags:
        - Order
      summary: Retrieve all orders
      responses:
        '200':
          description: A list of all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  
    post:
      tags:
        - Order
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  
  /orders/{orderId}:
    get:
      tags:
        - Order
      summary: Retrieve a specific order by ID
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Details of the specified order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
  
    put:
      tags:
        - Order
      summary: Update a specific order by ID
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    delete:
      tags:
        - Order
      summary: Delete a specific order by ID
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found

security:
  - bearerAuth: []